openapi: 3.0.2
servers:
  - url: "https://pokeapi.co/api/v2"
info:
  description: ""
  version: "1.0.0"
  title: "Pokemon API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: "pokemon"
    description: "Everything about the Pokemons API"
    externalDocs:
      description: "See documentation"
      url: "https://pokeapi.co/docs/v2"
  - name: "pet"
    description: "Everything about your Pets"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "store"
    description: "Access to Petstore orders"
  - name: "user"
    description: "Operations about user"
    externalDocs:
      description: "Find out more about our store"
      url: "http://swagger.io"
# schemes:
#   - "https"
#   - "http"
paths:
  /pokemon-color/{pokemonIdOrName}:
    get:
      tags:
        - "pokemon"
      summary: "Get pokemons by their color id or name"
      description: "Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon's body. No orange category exists; Pokémon that are primarily orange are listed as red or brown."
      operationId: "GetPokemonsByColor"
      parameters:
        - in: "path"
          required: true
          schema:
            type: "string"
          name: "pokemonIdOrName"
          description: "Arbitrary body"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pokemon"
                # :
  /color/{pokemonIdOrName}:
    get:
      tags:
        - "pokemon"
      summary: "Get pokemons by their color id or name"
      description: "Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon's body. No orange category exists; Pokémon that are primarily orange are listed as red or brown."
      operationId: "GetPokemonsByColor2"
      parameters:
        - in: "path"
          required: true
          schema:
            type: "string"
          name: "pokemonIdOrName"
          description: "Arbitrary body"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pokemon"
  /pokemon/{idOrName}:
    get:
      tags:
        - "pokemon"
      summary: "Get pokemon by id"
      description: "Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See Bulbapedia for greater detail."
      operationId: "GetPokemonById"
      parameters:
        - in: "path"
          required: true
          schema:
            type: "string"
          name: "idOrName"
          description: pokemon id or pokemon name
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pokemon"

# definitions:
components:
  requestBodies:
    PokemonArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Pokemon"
      description: List of user object
      required: true
  schemas:
    Pokemon:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        pokemonId:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int32"
        shipDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          description: "Order Status"
          enum:
            - "placed"
            - "approved"
            - "delivered"
        complete:
          type: "boolean"
          default: false
    Order:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        petId:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int32"
        shipDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          description: "Order Status"
          enum:
            - "placed"
            - "approved"
            - "delivered"
        complete:
          type: "boolean"
          default: false
      xml:
        name: "Order"
    Category:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
      xml:
        name: "Category"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
        userStatus:
          type: "integer"
          format: "int32"
          description: "User Status"
      xml:
        name: "User"
    Tag:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
      xml:
        name: "Tag"
    Pet:
      type: "object"
      required:
        - "name"
        - "photoUrls"
      properties:
        id:
          type: "integer"
          format: "int64"
        category:
          $ref: "#/components/schemas/Category"
        name:
          type: "string"
          example: "doggie"
        photoUrls:
          type: "array"
          xml:
            name: "photoUrl"
            wrapped: true
          items:
            type: "string"
        tags:
          type: "array"
          xml:
            name: "tag"
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: "string"
          description: "pet status in the store"
          enum:
            - "available"
            - "pending"
            - "sold"
      xml:
        name: "Pet"
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
